<log4net>
  <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%date{dd-MM-yyyy HH:mm:ss.fff} [%thread] %level %logger - %message%newline%exception"/>
    </layout>
    <!--<filter type="log4net.Filter.StringMatchFilter">
        <stringToMatch value="test" />
      </filter>-->
    <!--<filter type="log4net.Filter.DenyAllFilter" />-->

    <!--NOTE: multiple filters can be used. once a filter criteria is fulfilled, it looks for next filter. for stringMatch, the strings that are not matched, 
      will also be logged if DenyAllFilter is not present and it will treat that it needs to be logged. so always use DenyAllFilter with StringMatch
      Same goes for LevelMatchFilter-->

    <!--<filter type="log4net.Filter.LevelRangeFilter">
        <levelMin value = "WARN"/>
        <levelMax value = "WARN"/>
      </filter>-->

    <!--<filter type="log4net.Filter.LevelMatchFilter">
        <levelToMatch value = "ERROR"/>
      </filter>-->
    <!--<filter type="log4net.Filter.DenyAllFilter" />-->
  </appender>
  <appender name="FileAppender" type="log4net.Appender.FileAppender">
    <file type="log4net.Util.PatternString" value="%property{LogsDirectory}\StfTestExecutor-%date{yyyy-MM-dd_HH-mm-ss}.log" />
    <appendToFile value="true" />
    <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%date{dd-MM-yyyy HH:mm:ss.fff} [%thread] %level %logger - %message%newline%exception" />
    </layout>
    <filter type="log4net.Filter.LevelRangeFilter">
      <levelMin value="DEBUG" />
      <levelMax value="FATAL" />
    </filter>
  </appender>
  <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
    <file type="log4net.Util.PatternString" value="%property{LogsDirectory}\StfTestExecutor-%date{yyyy-MM-dd_HH-mm-ss}.log" />
    <appendToFile value="true" />
    <rollingStyle value="Size" />
    <maxSizeRollBackups value="5" />
    <maximumFileSize value="10MB" />
    <staticLogFileName value="true" />
    <!--this makes sure that the filename does not change-->
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%date{dd-MM-yyyy HH:mm:ss.fff} [%thread] %level %logger - %message%newline%exception" />
    </layout>
  </appender>

  <!--ado .net appender is used to write logs to sql server-->
  <appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender">
    <bufferSize value="100" />
    <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
    <connectionString value="data source=[database server]; initial catalog=[database name];integrated security=false; persist security info=True;User ID=[user];Password=[password]" />
    <commandText value="INSERT INTO Log ([Date],[Thread],[Level],[Logger], [Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
    <commandType value="Text"/>

    <!--use the below two lines instead of above two lines to use the stored procedure. don't use both-->

    <!--<commandText value="dbo.procLog_Insert"/>
      <commandType value="StoredProcedure"/>-->

    <!--the parameters match up the parameters in the insert statement. no need in case of stored procedure. required only for insert statement log-->

    <parameter>
      <parameterName value="@log_date" />
      <dbType value="DateTime" />
      <layout type="log4net.Layout.RawTimeStampLayout" />
    </parameter>
    <parameter>
      <parameterName value="@thread" />
      <dbType value="String" />
      <size value="255" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%thread" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@log_level" />
      <dbType value="String" />
      <size value="50" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%level" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@logger" />
      <dbType value="String" />
      <size value="255" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%logger" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@message" />
      <dbType value="String" />
      <size value="4000" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%message" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@exception" />
      <dbType value="String" />
      <size value="2000" />
      <layout type="log4net.Layout.ExceptionLayout" />
    </parameter>
  </appender>

  <!--if an appender is not mentioned in the root section, it will not be used. -->
  <root>
    <level value="DEBUG"/>
    <appender-ref ref="ConsoleAppender" />
    <!--<appender-ref ref="FileAppender"/>-->
    <appender-ref ref="rollingfileappender"/>
    <!--<appender-ref ref="AdoNetAppender"/>-->
  </root>
  <!--<logger name="Log4NetTest.OtherClass">
      <level value="DEBUG"/>
      <appender-ref ref="ConsoleAppender"/>
    </logger>-->
</log4net>